if game.PlaceId ~= 135880624242201 then
    print("This script is only for game ID 135880624242201.")
    return
end

--// Load PHCzack Library
local PHCzack = loadstring(game:HttpGet("https://raw.githubusercontent.com/PHCzack/PHCzackScript/refs/heads/main/library.lua"))()

--// Create Main Window
local Window = PHCzack:CreateWindow({
    Name = "[❄️]Cut Trees - PHCzack Script"
})

--// Tabs
local MainTab = Window:CreateTab("Main")
local ChestTab = Window:CreateTab("Chest")
local MiscTab = Window:CreateTab("Misc")


--// Variables
local TeleportEnabled = false
local AutoDiscardEnabled = false
local AutoGiantChestEnabled = false
local AutoDiscardNormalEnabled = false
local AutoDiscardHugeEnabled = false
local AutoDiscardGiantEnabled = false
local ItemList = {
    "TNT",
    "DamagePotion",
    "XPPotion",
    "WalkSpeedPotion",
    "ToolSpeedPotion"
}

local SelectedItem = {}
local AutoBuyEnabled = false










local SelectedChests = {}
local Player = game.Players.LocalPlayer
local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")






-----------------------------------------------------------
-- CHEST DISPLAY NAMES + INTERNAL MAP
-----------------------------------------------------------
local ChestMap = {
    ["Old Chest"] = "Chest1",
    ["Old Chest Huge"] = "Chest1_Huge",
    ["Old Chest Giant"] = "Chest1_Giant",

    ["Basic Chest"] = "Chest2",
    ["Basic Chest Huge"] = "Chest2_Huge",
    ["Basic Chest Giant"] = "Chest2_Giant",

    ["Frozen Chest"] = "Chest3",
    ["Frozen Chest Huge"] = "Chest3_Huge",
    ["Frozen Chest Giant"] = "Chest3_Giant",

    ["Mystic Chest"] = "Chest4",
    ["Mystic Chest Huge"] = "Chest4_Huge",
    ["Mystic Chest Giant"] = "Chest4_Giant",

    ["Golden Chest"] = "Chest5",
    ["Golden Chest Huge"] = "Chest5_Huge",
    ["Golden Chest Giant"] = "Chest5_Giant",

    ["Royal Chest"] = "Chest6",
    ["Royal Chest Huge"] = "Chest6_Huge",
    ["Royal Chest Giant"] = "Chest6_Giant",

    ["Huge Bone Chest"] = "Chest7",
    ["Huge Bone Chest Huge"] = "Chest7_Huge",
    ["Huge Bone Chest Giant"] = "Chest7_Giant",

    ["Huge Laga Chest"] = "Chest8",
    ["Huge Laga Chest Huge"] = "Chest8_Huge",
    ["Huge Laga Chest Giant"] = "Chest8_Giant",

    ["Horns Chest"] = "Chest9",
    ["Horns Chest Huge"] = "Chest9_Huge",
    ["Horns Chest Giant"] = "Chest9_Giant",

    ["Deep Chest"] = "Chest10",
    ["Deep Chest Huge"] = "Chest10_Huge",
    ["Deep Chest Giant"] = "Chest10_Giant",

    ["Dark Chest"] = "Chest11",
    ["Dark Chest Huge"] = "Chest11_Huge",
    ["Dark Chest Giant"] = "Chest11_Giant",

    ["Deep Dark Chest"] = "Chest12",
    ["Deep Dark Chest Huge"] = "Chest12_Huge",
    ["Deep Dark Chest Giant"] = "Chest12_Giant",

    ["Deepest Chest"] = "Chest13",
    ["Deepest Chest Huge"] = "Chest13_Huge",
    ["Deepest Chest Giant"] = "Chest13_Giant",

    ["Darkness Chest"] = "Chest14",
    ["Darkness Chest Huge"] = "Chest14_Huge",
    ["Darkness Chest Giant"] = "Chest14_Giant",

    ["Winter Chest"] = "Chest15",
    ["Winter Chest Huge"] = "Chest15_Huge",
    ["Winter Chest Giant"] = "Chest15_Giant",

    ["Ice Chest"] = "Chest16",
    ["Ice Chest Huge"] = "Chest16_Huge",
    ["Ice Chest Giant"] = "Chest16_Giant"
}

-- Create display names for dropdown
local DisplayChestList = { "Select All" }
for name, _ in pairs(ChestMap) do
    table.insert(DisplayChestList, name)
end
table.sort(DisplayChestList, function(a, b)
    if a == "Select All" then return true end
    if b == "Select All" then return false end
    return a < b
end)

-----------------------------------------------------------
-- TELEPORT + FIRE FUNCTION
-----------------------------------------------------------
local function TeleportAndFire()
    while TeleportEnabled do
        for _, chest in pairs(workspace.ChestFolder:GetChildren()) do
            if not TeleportEnabled then break end
            local hit = chest:FindFirstChild("Hitpart")
            local prompt = hit and hit:FindFirstChild("ProximityPrompt")
            if hit and prompt and HRP then
                HRP.CFrame = hit.CFrame + Vector3.new(0, 3, 0)
                task.wait(0.2)
                fireproximityprompt(prompt)
                task.wait(0.5)
            end
        end
    end
end





-----------------------------------------------------------
-- AUTO DISCARD FUNCTION (SimpleSpy Style with [3] = true)
-----------------------------------------------------------
local function FireDiscard(chestDisplayName)
    local internalName = ChestMap[chestDisplayName]
    if not internalName then return end

    -- Script generated by SimpleSpy - credits to exx#9394
    local args = {
        [1] = "Discard",
        [2] = internalName,
        [3] = true
    }

    game:GetService("ReplicatedStorage").Signal.Chest:FireServer(unpack(args))
end

local function AutoDiscard()
    while AutoDiscardEnabled do
        if SelectedChest == "Select All" then
            for name, _ in pairs(ChestMap) do
                FireDiscard(name)
                task.wait(0.5)
            end
        else
            FireDiscard(SelectedChest)
            task.wait(0.5)
        end
    end
end

-----------------------------------------------------------
--// AUTO FARM TOGGLE (Attacks Trees every 0.5s)
-----------------------------------------------------------

local autoFarm = false
local farmThread

local MainSection = MainTab:CreateSection("Main")

MainSection:Toggle({
    Name = "Auto Farm",
    CurrentValue = false,
    Callback = function(state)
        autoFarm = state
        if state then
            print("Clear Trees")

            farmThread = task.spawn(function()
                while autoFarm do
                    local treesFolder = workspace:FindFirstChild("TreesFolder")
                    if treesFolder then
                        local startTime = tick()
                        
                        -- Fire every 0.5 seconds for 5 seconds total
                        while autoFarm and tick() - startTime < 3 do
                            for _, tree in pairs(treesFolder:GetChildren()) do
                                if not autoFarm then break end -- stop immediately if toggle off
                                if tree:IsA("Model") then
                                    local args = {
                                        [1] = "damage",
                                        [2] = tree.Name
                                    }
                                    game:GetService("ReplicatedStorage").Signal.Tree:FireServer(unpack(args))
                                end
                            end
                            task.wait(3) -- Fire every 0.5 seconds
                        end
                        
                        -- Wait until 5 seconds total have passed
                        local elapsed = tick() - startTime
                        if elapsed < 3 then
                            task.wait(3 - elapsed)
                        end
                    else
                        task.wait(3) -- If no trees folder, wait 5 seconds
                    end
                end
            end)

        else
            print("[Auto Farm] Disabled")
        end
    end
})




MainSection:CreateDropdown({
    Name = "Select Item(s) to Auto-Buy",
    Options = ItemList,
    MultiSelection = true,
    CurrentOption = {},
    Flag = "ItemSelectMulti",
    Callback = function(Options)
        SelectedItems = Options
    end,
})

MainSection:Toggle({
    Name = "Auto Buy Selected Items",
    CurrentValue = false,
    Flag = "AutoBuyToggle",
    Callback = function(Value)
        AutoBuyEnabled = Value
        task.spawn(function()
            while AutoBuyEnabled do
                if #SelectedItems > 0 then
                    for _, itemName in pairs(SelectedItems) do
                        local args = {
                            [1] = "BuyItem",
                            [2] = itemName
                        }
                        game:GetService("ReplicatedStorage").Signal.Item:FireServer(unpack(args))
                        task.wait(0.5)
                    end
                end
                task.wait(0.5)
            end
        end)
    end
})


local PotionSection = MainTab:CreateSection("Position")


-- Candy Potions Multi-Select
local ShopPotions = {
    "TNT",
    "DamagePotion",
    "XPPotion",
    "WalkSpeedPotion",
    "ToolSpeedPotion"
}

local SelectedPotions = {}
local AutoUsePotionEnabled = false

PotionSection:CreateDropdown({
    Name = "Select Potion(s) to Use",
    Options = ShopPotions,
    MultiSelection = true,
    CurrentOption = {},
    Flag = "CandyPotionSelectMulti",
    Callback = function(Options)
        SelectedPotions = Options
    end,
})

PotionSection:Toggle({
    Name = "Auto Use Potions",
    CurrentValue = false,
    Flag = "AutoUseCandyPotionToggle",
    Callback = function(Value)
        AutoUsePotionEnabled = Value
        task.spawn(function()
            while AutoUsePotionEnabled do
                if #SelectedPotions > 0 then
                    -- Use all selected potions quickly (with small delays between)
                    for _, potionName1 in pairs(SelectedPotions) do
                        local args = {
                            [1] = "useItem",
                            [2] = potionName1
                        }
                        game:GetService("ReplicatedStorage").Signal.Item:FireServer(unpack(args))
                        task.wait(0.5) -- Small delay between potions
                    end
                    -- Wait 119 seconds before using all potions again
                    task.wait(119)
                else
                    -- If no potions selected, just wait
                    task.wait(119)
                end
            end
        end)
    end
})










local ChestSection = ChestTab:CreateSection("Auto Collect Chest")
-----------------------------------------------------------
--// AUTO COLLECT CHESTS TOGGLE (Teleport + real object)
-----------------------------------------------------------
ChestSection:Toggle({
    Name = "Auto Collect All Chests",
    CurrentValue = false,
    Flag = "TeleportToggle",
    Callback = function(Value)
        TeleportEnabled = Value
        HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
        if TeleportEnabled then
            TeleportAndFire()
        end
    end,
})



local DiscardSection = ChestTab:CreateSection("Auto Discard Chest")

-----------------------------------------------------------
-- DISCARD TAB UI
-----------------------------------------------------------


DiscardSection:CreateDropdown({
    Name = "Select Chest(s) to Discard",
    Options = DisplayChestList,
    MultiSelection = true,
    CurrentOption = {},
    Flag = "ChestSelectMulti",
    Callback = function(Options)
        SelectedChests = Options
    end,
})

DiscardSection:Toggle({
    Name = "Auto Discard (Selected)",
    CurrentValue = false,
    Flag = "AutoDiscard",
    Callback = function(Value)
        AutoDiscardEnabled = Value
        task.spawn(function()
            while AutoDiscardEnabled do
                if #SelectedChests > 0 then
                    if table.find(SelectedChests, "Select All") then
                        for name, _ in pairs(ChestMap) do
                            FireDiscard(name)
                            task.wait(0.2)
                        end
                    else
                        for _, chestName in pairs(SelectedChests) do
                            FireDiscard(chestName)
                            task.wait(0.2)
                        end
                    end
                end
                task.wait(0.5)
            end
        end)
    end,
})

DiscardSection:Toggle({
    Name = "Auto Discard Normal Chests",
    CurrentValue = false,
    Flag = "AutoDiscardNormal",
    Callback = function(Value)
        AutoDiscardNormalEnabled = Value
        task.spawn(function()
            while AutoDiscardNormalEnabled do
                for displayName, _ in pairs(ChestMap) do
                    local internalName = ChestMap[displayName]
                    if internalName and not string.find(internalName, "_Huge") and not string.find(internalName, "_Giant") then
                        FireDiscard(displayName)
                        task.wait(0.5)
                    end
                end
                task.wait(0.5)
            end
        end)
    end,
})

DiscardSection:Toggle({
    Name = "Auto Discard Huge Chests",
    CurrentValue = false,
    Flag = "AutoDiscardHuge",
    Callback = function(Value)
        AutoDiscardHugeEnabled = Value
        task.spawn(function()
            while AutoDiscardHugeEnabled do
                for displayName, _ in pairs(ChestMap) do
                    local internalName = ChestMap[displayName]
                    if internalName and string.find(internalName, "_Huge") then
                        FireDiscard(displayName)
                        task.wait(0.5)
                    end
                end
                task.wait(0.5)
            end
        end)
    end,
})

DiscardSection:Toggle({
    Name = "Auto Discard Giant Chests",
    CurrentValue = false,
    Flag = "AutoDiscardGiant",
    Callback = function(Value)
        AutoDiscardGiantEnabled = Value
        task.spawn(function()
            while AutoDiscardGiantEnabled do
                for displayName, _ in pairs(ChestMap) do
                    local internalName = ChestMap[displayName]
                    if internalName and string.find(internalName, "_Giant") then
                        FireDiscard(displayName)
                        task.wait(0.5)
                    end
                end
                task.wait(0.5)
            end
        end)
    end,
})

local MiscSection = MiscTab:CreateSection("Player")
-----------------------------------------------------------
--// MISC TAB (Player Controls + Remove Lag Toggle)
-----------------------------------------------------------

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function getHumanoid()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        return LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    end
    return nil
end

-- WalkSpeed Slider
MiscSection:Slider({
    Name = "Player Speed",
    Min = 16,
    Max = 300,
    Default = 16,
    Callback = function(value)
        local hum = getHumanoid()
        if hum then
            hum.WalkSpeed = value
        end
    end
})

-- JumpPower Slider
MiscSection:Slider({
    Name = "Player Jump Power",
    Min = 50,
    Max = 300,
    Default = 50,
    Callback = function(value)
        local hum = getHumanoid()
        if hum then
            hum.JumpPower = value
        end
    end
})

-- HipHeight Slider
MiscSection:Slider({
    Name = "Player Hip Height",
    Min = 0,
    Max = 100,
    Default = 2.0,
    Callback = function(value)
        local hum = getHumanoid()
        if hum then
            hum.HipHeight = value
        end
    end
})





local MiscSection1 = MiscTab:CreateSection("Graphics")


local autoHideTrees = false
local originalTreeData = {} -- store original transparency/canCollide

MiscSection1:Toggle({
    Name = "Auto Hide Trees",
    CurrentValue = false,
    Callback = function(state)
        autoHideTrees = state
        local treesFolder = workspace:FindFirstChild("TreesFolder")
        if not treesFolder then return end

        if state then
            print("[Misc] Auto Hide Trees Enabled")
            task.spawn(function()
                while autoHideTrees do
                    for _, tree in pairs(treesFolder:GetChildren()) do
                        if tree:IsA("Model") then
                            for _, part in pairs(tree:GetDescendants()) do
                                if part:IsA("BasePart") then
                                    if not originalTreeData[part] then
                                        originalTreeData[part] = {Transparency = part.Transparency, CanCollide = part.CanCollide}
                                    end
                                    part.Transparency = 1
                                    part.CanCollide = false
                                end
                            end
                        end
                    end
                    task.wait(5)
                end
            end)
        else
            print("[Misc] Auto Hide Trees Disabled")
            -- Restore original values
            for part, data in pairs(originalTreeData) do
                if part and part.Parent then
                    part.Transparency = data.Transparency
                    part.CanCollide = data.CanCollide
                end
            end
            originalTreeData = {}
        end
    end
})

-----------------------------------------------------------
--// REMOVE LAG TOGGLE
-----------------------------------------------------------

local removeLag = false

MiscSection1:Toggle({
    Name = "Remove Lag",
    CurrentValue = false,
    Callback = function(state)
        removeLag = state
        if state then
            print("[Misc] Remove Lag Enabled")
            task.spawn(function()
                while removeLag do
                    for _, v in pairs(workspace:GetDescendants()) do
                        if v:IsA("BasePart") then
                            v.Material = Enum.Material.SmoothPlastic
                            v.Reflectance = 0
                        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Fire") or v:IsA("Smoke") or v:IsA("Sparkles") then
                            v.Enabled = false
                        elseif v:IsA("Decal") or v:IsA("Texture") then
                            v:Destroy()
                        end
                    end
                    task.wait(5)
                end
            end)
        else
            print("[Misc] Remove Lag Disabled")
        end
    end
})


-- Add this to your MiscSection

local fpsEnabled = false
local fpsLabel = nil

MiscSection1:Toggle({
    Name = "FPS Counter",
    CurrentValue = false,
    Callback = function(state)
        fpsEnabled = state
        if state then
            print("[FPS Counter] Enabled")
            
            -- Create FPS label if it doesn't exist
            if not fpsLabel then
                fpsLabel = Instance.new("TextLabel")
                fpsLabel.Name = "FPSCounter"
                fpsLabel.Text = "FPS: 0"
                fpsLabel.TextColor3 = Color3.new(1, 1, 1) -- White
                fpsLabel.TextSize = 18
                fpsLabel.Font = Enum.Font.GothamBold
                fpsLabel.BackgroundColor3 = Color3.new(0, 0, 0) -- Black background
                fpsLabel.BackgroundTransparency = 0.5
                fpsLabel.BorderSizePixel = 0
                fpsLabel.Size = UDim2.new(0, 100, 0, 30)
                fpsLabel.Position = UDim2.new(0, 10, 0, 10) -- Upper left corner
                fpsLabel.ZIndex = 10
                fpsLabel.Parent = game:GetService("CoreGui"):FindFirstChild("PHCzack") or game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
            end
            
            -- Update FPS continuously
            fpsThread = task.spawn(function()
                local runService = game:GetService("RunService")
                local frameCount = 0
                local lastUpdate = tick()
                
                while fpsEnabled do
                    frameCount = frameCount + 1
                    
                    -- Update every second
                    if tick() - lastUpdate >= 1 then
                        local fps = math.floor(frameCount / (tick() - lastUpdate))
                        frameCount = 0
                        lastUpdate = tick()
                        
                        if fpsLabel then
                            fpsLabel.Text = "FPS: " .. fps
                            
                            -- Color coding based on FPS
                            if fps >= 60 then
                                fpsLabel.TextColor3 = Color3.new(0, 1, 0) -- Green
                            elseif fps >= 30 then
                                fpsLabel.TextColor3 = Color3.new(1, 1, 0) -- Yellow
                            else
                                fpsLabel.TextColor3 = Color3.new(1, 0, 0) -- Red
                            end
                        end
                    end
                    
                    task.wait()
                end
                
                -- Clean up when disabled
                if fpsLabel then
                    fpsLabel:Destroy()
                    fpsLabel = nil
                end
            end)
            
        else
            print("[FPS Counter] Disabled")
            if fpsLabel then
                fpsLabel:Destroy()
                fpsLabel = nil
            end
        end
    end
})





















local EventSection = MainTab:CreateSection("Events Farm")



local autoFarm1 = false
local farmThread1


EventSection:Toggle({
    Name = "Clear Trees",
    CurrentValue = false,
    Callback = function(state)
        autoFarm1 = state
        if state then
            print("Clear Trees")

            farmThread1 = task.spawn(function()
                while autoFarm1 do
                    local treesFolder = workspace:FindFirstChild("TreesFolder")
                    if treesFolder then
                        local startTime = tick()
                        
                        -- Fire every 0.5 seconds for 5 seconds total
                        while autoFarm1 and tick() - startTime < 5 do
                            for _, tree in pairs(treesFolder:GetChildren()) do
                                if not autoFarm1 then break end -- stop immediately if toggle off
                                if tree:IsA("Model") then
                                    local args = {
                                        [1] = "damage",
                                        [2] = tree.Name
                                    }
                                    game:GetService("ReplicatedStorage").Signal.Tree:FireServer(unpack(args))
                                end
                            end
                            task.wait(5) -- Fire every 0.5 seconds
                        end
                        
                        -- Wait until 5 seconds total have passed
                        local elapsed = tick() - startTime
                        if elapsed < 5 then
                            task.wait(5 - elapsed)
                        end
                    else
                        task.wait(5) -- If no trees folder, wait 5 seconds
                    end
                end
            end)

        else
            print("[Auto Farm] Disabled")
        end
    end
})




-- Add this to your MainSection after the existing Auto Farm toggle

local autoFarmCandy = false

EventSection:Toggle({
    Name = "Auto Farm Candy Tree",
    CurrentValue = false,
    Callback = function(state)
        autoFarmCandy = state
        if state then
            print("[Auto Farm Candy Tree] Enabled")

            farmCandyThread = task.spawn(function()
                while autoFarmCandy do
                    local treesFolder = workspace:FindFirstChild("TreesFolder")
                    if treesFolder then
                        for _, tree in pairs(treesFolder:GetChildren()) do
                            if not autoFarmCandy then break end -- stop immediately if toggle off
                            if tree:IsA("Model") then
                                local neon = tree:FindFirstChild("Tree") and tree.Tree:FindFirstChild("Neon")
                                if neon then
                                    -- Update HRP reference
                                    HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
                                    
                                    -- Teleport to tree first
                                    if HRP then
                                        HRP.CFrame = tree.Tree.Neon.CFrame + Vector3.new(0, 3, 0)
                                        task.wait(0.2) -- Small wait for teleport to complete
                                    end
                                    
                                    -- Spam damage for 5 seconds
                                    local startTime = tick()
                                    while autoFarmCandy and tick() - startTime < 5 do
                                        local args = {
                                            [1] = "damage",
                                            [2] = tree.Name
                                        }
                                        game:GetService("ReplicatedStorage").Signal.Tree:FireServer(unpack(args))
                                        task.wait(0.1) -- Spam every 0.1 seconds
                                    end
                                end
                            end
                        end
                    end
                    task.wait(0.1)
                end
            end)

        else
            print("[Auto Farm Candy Tree] Disabled")
        end
    end
})



local platformEnabled = false
local platformPart = nil

EventSection:Toggle({
    Name = "Anti Fall",
    CurrentValue = false,
    Callback = function(state)
        platformEnabled = state
        if state then
            print("[Platform] Enabled")
            
            -- Create platform if it doesn't exist
            if not platformPart then
                platformPart = Instance.new("Part")
                platformPart.Name = "PlayerPlatform"
                platformPart.Anchored = true
                platformPart.CanCollide = true
                platformPart.Material = Enum.Material.Plastic
                platformPart.BrickColor = BrickColor.new("Bright blue")
                platformPart.Size = Vector3.new(10, 1, 10) -- Larger platform for safety
                platformPart.Parent = workspace
            end
            
            -- Set platform to current position (fixed)
            if Player.Character then
                local rootPart = Player.Character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    -- Create platform at current position but lower
                    local currentPos = rootPart.Position
                    platformPart.CFrame = CFrame.new(currentPos.X, currentPos.Y - 20, currentPos.Z)
                    print("[Platform] Fixed position set at: " .. tostring(platformPart.Position))
                end
            end
            
            -- Teleport player to platform when falling
            platformThread = task.spawn(function()
                while platformEnabled do
                    if Player.Character then
                        local rootPart = Player.Character:FindFirstChild("HumanoidRootPart")
                        local humanoid = Player.Character:FindFirstChildOfClass("Humanoid")
                        
                        if rootPart and humanoid then
                            -- Check if player is falling (high negative Y velocity or far from platform)
                            local isFalling = rootPart.Velocity.Y < -50 or rootPart.Position.Y < platformPart.Position.Y - 5
                            
                            if isFalling then
                                -- Teleport player to platform
                                rootPart.CFrame = platformPart.CFrame + Vector3.new(0, 10, 0)
                                print("[Platform] Teleported to safe platform")
                            end
                        end
                    end
                    task.wait(0.5) -- Check every 0.5 seconds
                end
                
                -- Clean up when disabled
                if platformPart then
                    platformPart:Destroy()
                    platformPart = nil
                end
            end)
            
        else
            print("[Platform] Disabled")
            if platformPart then
                platformPart:Destroy()
                platformPart = nil
            end
        end
    end
})





local EventSection1 = MainTab:CreateSection("Events Shop")

-- Halloween Items Multi-Select
local HalloweenItems = {
    "HallowenSpin",
    "CandyDamagePotion1_x1",
    "CandyPotion1_x1",
    "HallowenChestx1",
    "HallowenChestx5",
    "HallowenChestx10"
}

local SelectedHalloweenItems = {}
local AutoBuyHalloweenEnabled = false

EventSection1:CreateDropdown({
    Name = "Select Halloween Item(s) to Buy",
    Options = HalloweenItems,
    MultiSelection = true,
    CurrentOption = {},
    Flag = "HalloweenItemSelectMulti",
    Callback = function(Options)
        SelectedHalloweenItems = Options
    end,
})

EventSection1:Toggle({
    Name = "Auto Buy Halloween Items",
    CurrentValue = false,
    Flag = "AutoBuyHalloweenToggle",
    Callback = function(Value)
        AutoBuyHalloweenEnabled = Value
        task.spawn(function()
            while AutoBuyHalloweenEnabled do
                if #SelectedHalloweenItems > 0 then
                    for _, itemName in pairs(SelectedHalloweenItems) do
                        local args = {
                            [1] = "Buy",
                            [2] = itemName
                        }
                        game:GetService("ReplicatedStorage").Signal.LimitedEvent:FireServer(unpack(args))
                        task.wait(1)
                    end
                end
                task.wait(1)
            end
        end)
    end
})


local EventSection2 = MainTab:CreateSection("Events Position")


-- Candy Potions Multi-Select
local CandyPotions = {
    "CandyPotion1_x1",
    "CandyDamagePotion1_x1"
}

local SelectedCandyPotions = {}
local AutoUseCandyPotionEnabled = false

EventSection2:CreateDropdown({
    Name = "Select Candy Potion(s) to Use",
    Options = CandyPotions,
    MultiSelection = true,
    CurrentOption = {},
    Flag = "CandyPotionSelectMulti",
    Callback = function(Options)
        SelectedCandyPotions = Options
    end,
})

EventSection2:Toggle({
    Name = "Auto Use Candy Potions",
    CurrentValue = false,
    Flag = "AutoUseCandyPotionToggle",
    Callback = function(Value)
        AutoUseCandyPotionEnabled = Value
        task.spawn(function()
            while AutoUseCandyPotionEnabled do
                if #SelectedCandyPotions > 0 then
                    -- Use all selected candy potions quickly (with small delays between)
                    for _, potionName in pairs(SelectedCandyPotions) do
                        local args = {
                            [1] = "useItem",
                            [2] = potionName
                        }
                        game:GetService("ReplicatedStorage").Signal.Item:FireServer(unpack(args))
                        task.wait(0.5) -- Small delay between potions
                    end
                    -- Wait 119 seconds before using all potions again
                    task.wait(119)
                else
                    -- If no potions selected, just wait
                    task.wait(119)
                end
            end
        end)
    end
})
